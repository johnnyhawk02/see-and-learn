// Service for handling personalized audio messages

// Get a personalized congratulation message audio for the player
export const getPersonalizedAudio = () => {
  try {
    // Check if we have personalized audio stored
    const personalizedAudio = localStorage.getItem('personalizedAudio');
    
    if (!personalizedAudio) {
      return null;
    }
    
    const audioUrls = JSON.parse(personalizedAudio);
    
    // Pick a random congratulation message
    const messageTypes = Object.keys(audioUrls);
    const randomType = messageTypes[Math.floor(Math.random() * messageTypes.length)];
    
    return audioUrls[randomType];
  } catch (error) {
    console.error('Error retrieving personalized audio:', error);
    return null;
  }
};

// Play a personalized audio or fallback to a generic message
export const playPersonalizedAudio = (fallbackMessage = null) => {
  // Check if audio is enabled in settings
  const savedSettings = localStorage.getItem('gameSettings');
  const settings = savedSettings ? JSON.parse(savedSettings) : {};
  
  if (settings.soundEnabled === false) {
    return; // Don't play anything if sound is disabled
  }
  
  // Try to get personalized audio
  const audioUrl = getPersonalizedAudio();
  
  if (audioUrl) {
    // Cancel any ongoing audio
    if (window.currentAudio) {
      window.currentAudio.pause();
      window.currentAudio = null;
    }
    
    // Play the personalized audio
    const audio = new Audio(audioUrl);
    window.currentAudio = audio;
    
    audio.play().catch(error => {
      console.error("Error playing personalized audio:", error);
      // If personalized audio fails, try fallback
      speakFallbackMessage(settings.playerName, fallbackMessage);
    });
    
    audio.onended = () => {
      window.currentAudio = null;
    };
  } else {
    // No personalized audio found, use speech synthesis as fallback
    speakFallbackMessage(settings.playerName, fallbackMessage);
  }
};

// Speak a fallback message using Speech Synthesis API
const speakFallbackMessage = (playerName, fallbackMessage = null) => {
  try {
    if (!('speechSynthesis' in window)) {
      return; // Speech synthesis not supported
    }
    
    let message = fallbackMessage || 'Great job!';
    
    // Add player name if available
    if (playerName) {
      message = `${message}, ${playerName}!`;
    } else {
      message = `${message}!`;
    }
    
    const utterance = new SpeechSynthesisUtterance(message);
    utterance.rate = 0.9;
    window.speechSynthesis.speak(utterance);
  } catch (error) {
    console.error('Speech synthesis error:', error);
  }
};

// Function to get the current player's name
export const getPlayerName = () => {
  try {
    const savedSettings = localStorage.getItem('gameSettings');
    if (savedSettings) {
      const settings = JSON.parse(savedSettings);
      return settings.playerName || '';
    }
    return '';
  } catch (error) {
    console.error('Error getting player name:', error);
    return '';
  }
};